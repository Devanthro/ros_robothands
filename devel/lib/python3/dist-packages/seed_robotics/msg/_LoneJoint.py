# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from seed_robotics/LoneJoint.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LoneJoint(genpy.Message):
  _md5sum = "6abe499ce867c10d257cf3acca9de505"
  _type = "seed_robotics/LoneJoint"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string name
uint8 bus_id
uint8 stiffness
uint8 stress_level
uint16 target_position
uint16 target_speed
uint16 torque_limit
uint16 present_position
int16 present_speed
uint8 temperature
uint8 moving
uint8 HW_error_condition
int16 current
"""
  __slots__ = ['name','bus_id','stiffness','stress_level','target_position','target_speed','torque_limit','present_position','present_speed','temperature','moving','HW_error_condition','current']
  _slot_types = ['string','uint8','uint8','uint8','uint16','uint16','uint16','uint16','int16','uint8','uint8','uint8','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,bus_id,stiffness,stress_level,target_position,target_speed,torque_limit,present_position,present_speed,temperature,moving,HW_error_condition,current

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LoneJoint, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.bus_id is None:
        self.bus_id = 0
      if self.stiffness is None:
        self.stiffness = 0
      if self.stress_level is None:
        self.stress_level = 0
      if self.target_position is None:
        self.target_position = 0
      if self.target_speed is None:
        self.target_speed = 0
      if self.torque_limit is None:
        self.torque_limit = 0
      if self.present_position is None:
        self.present_position = 0
      if self.present_speed is None:
        self.present_speed = 0
      if self.temperature is None:
        self.temperature = 0
      if self.moving is None:
        self.moving = 0
      if self.HW_error_condition is None:
        self.HW_error_condition = 0
      if self.current is None:
        self.current = 0
    else:
      self.name = ''
      self.bus_id = 0
      self.stiffness = 0
      self.stress_level = 0
      self.target_position = 0
      self.target_speed = 0
      self.torque_limit = 0
      self.present_position = 0
      self.present_speed = 0
      self.temperature = 0
      self.moving = 0
      self.HW_error_condition = 0
      self.current = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B4Hh3Bh().pack(_x.bus_id, _x.stiffness, _x.stress_level, _x.target_position, _x.target_speed, _x.torque_limit, _x.present_position, _x.present_speed, _x.temperature, _x.moving, _x.HW_error_condition, _x.current))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.bus_id, _x.stiffness, _x.stress_level, _x.target_position, _x.target_speed, _x.torque_limit, _x.present_position, _x.present_speed, _x.temperature, _x.moving, _x.HW_error_condition, _x.current,) = _get_struct_3B4Hh3Bh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B4Hh3Bh().pack(_x.bus_id, _x.stiffness, _x.stress_level, _x.target_position, _x.target_speed, _x.torque_limit, _x.present_position, _x.present_speed, _x.temperature, _x.moving, _x.HW_error_condition, _x.current))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.bus_id, _x.stiffness, _x.stress_level, _x.target_position, _x.target_speed, _x.torque_limit, _x.present_position, _x.present_speed, _x.temperature, _x.moving, _x.HW_error_condition, _x.current,) = _get_struct_3B4Hh3Bh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B4Hh3Bh = None
def _get_struct_3B4Hh3Bh():
    global _struct_3B4Hh3Bh
    if _struct_3B4Hh3Bh is None:
        _struct_3B4Hh3Bh = struct.Struct("<3B4Hh3Bh")
    return _struct_3B4Hh3Bh
