// Generated by gencpp from file seed_robotics/ListSetStiffness.msg
// DO NOT EDIT!


#ifndef SEED_ROBOTICS_MESSAGE_LISTSETSTIFFNESS_H
#define SEED_ROBOTICS_MESSAGE_LISTSETSTIFFNESS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <seed_robotics/SetStiffness.h>

namespace seed_robotics
{
template <class ContainerAllocator>
struct ListSetStiffness_
{
  typedef ListSetStiffness_<ContainerAllocator> Type;

  ListSetStiffness_()
    : joints()  {
    }
  ListSetStiffness_(const ContainerAllocator& _alloc)
    : joints(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::seed_robotics::SetStiffness_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::seed_robotics::SetStiffness_<ContainerAllocator> >::other >  _joints_type;
  _joints_type joints;





  typedef boost::shared_ptr< ::seed_robotics::ListSetStiffness_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::seed_robotics::ListSetStiffness_<ContainerAllocator> const> ConstPtr;

}; // struct ListSetStiffness_

typedef ::seed_robotics::ListSetStiffness_<std::allocator<void> > ListSetStiffness;

typedef boost::shared_ptr< ::seed_robotics::ListSetStiffness > ListSetStiffnessPtr;
typedef boost::shared_ptr< ::seed_robotics::ListSetStiffness const> ListSetStiffnessConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::seed_robotics::ListSetStiffness_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::seed_robotics::ListSetStiffness_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::seed_robotics::ListSetStiffness_<ContainerAllocator1> & lhs, const ::seed_robotics::ListSetStiffness_<ContainerAllocator2> & rhs)
{
  return lhs.joints == rhs.joints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::seed_robotics::ListSetStiffness_<ContainerAllocator1> & lhs, const ::seed_robotics::ListSetStiffness_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace seed_robotics

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::seed_robotics::ListSetStiffness_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::seed_robotics::ListSetStiffness_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::seed_robotics::ListSetStiffness_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::seed_robotics::ListSetStiffness_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::seed_robotics::ListSetStiffness_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::seed_robotics::ListSetStiffness_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::seed_robotics::ListSetStiffness_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dba60e53277bd72c114abe7a790b8b92";
  }

  static const char* value(const ::seed_robotics::ListSetStiffness_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdba60e53277bd72cULL;
  static const uint64_t static_value2 = 0x114abe7a790b8b92ULL;
};

template<class ContainerAllocator>
struct DataType< ::seed_robotics::ListSetStiffness_<ContainerAllocator> >
{
  static const char* value()
  {
    return "seed_robotics/ListSetStiffness";
  }

  static const char* value(const ::seed_robotics::ListSetStiffness_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::seed_robotics::ListSetStiffness_<ContainerAllocator> >
{
  static const char* value()
  {
    return "seed_robotics/SetStiffness[] joints\n"
"\n"
"================================================================================\n"
"MSG: seed_robotics/SetStiffness\n"
"string name\n"
"uint8 stiffness\n"
;
  }

  static const char* value(const ::seed_robotics::ListSetStiffness_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::seed_robotics::ListSetStiffness_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ListSetStiffness_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::seed_robotics::ListSetStiffness_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::seed_robotics::ListSetStiffness_<ContainerAllocator>& v)
  {
    s << indent << "joints[]" << std::endl;
    for (size_t i = 0; i < v.joints.size(); ++i)
    {
      s << indent << "  joints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::seed_robotics::SetStiffness_<ContainerAllocator> >::stream(s, indent + "    ", v.joints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEED_ROBOTICS_MESSAGE_LISTSETSTIFFNESS_H
