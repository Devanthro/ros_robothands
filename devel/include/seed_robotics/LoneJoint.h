// Generated by gencpp from file seed_robotics/LoneJoint.msg
// DO NOT EDIT!


#ifndef SEED_ROBOTICS_MESSAGE_LONEJOINT_H
#define SEED_ROBOTICS_MESSAGE_LONEJOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace seed_robotics
{
template <class ContainerAllocator>
struct LoneJoint_
{
  typedef LoneJoint_<ContainerAllocator> Type;

  LoneJoint_()
    : name()
    , bus_id(0)
    , stiffness(0)
    , stress_level(0)
    , target_position(0)
    , target_speed(0)
    , torque_limit(0)
    , present_position(0)
    , present_speed(0)
    , temperature(0)
    , moving(0)
    , HW_error_condition(0)
    , current(0)  {
    }
  LoneJoint_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , bus_id(0)
    , stiffness(0)
    , stress_level(0)
    , target_position(0)
    , target_speed(0)
    , torque_limit(0)
    , present_position(0)
    , present_speed(0)
    , temperature(0)
    , moving(0)
    , HW_error_condition(0)
    , current(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef uint8_t _bus_id_type;
  _bus_id_type bus_id;

   typedef uint8_t _stiffness_type;
  _stiffness_type stiffness;

   typedef uint8_t _stress_level_type;
  _stress_level_type stress_level;

   typedef uint16_t _target_position_type;
  _target_position_type target_position;

   typedef uint16_t _target_speed_type;
  _target_speed_type target_speed;

   typedef uint16_t _torque_limit_type;
  _torque_limit_type torque_limit;

   typedef uint16_t _present_position_type;
  _present_position_type present_position;

   typedef int16_t _present_speed_type;
  _present_speed_type present_speed;

   typedef uint8_t _temperature_type;
  _temperature_type temperature;

   typedef uint8_t _moving_type;
  _moving_type moving;

   typedef uint8_t _HW_error_condition_type;
  _HW_error_condition_type HW_error_condition;

   typedef int16_t _current_type;
  _current_type current;





  typedef boost::shared_ptr< ::seed_robotics::LoneJoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::seed_robotics::LoneJoint_<ContainerAllocator> const> ConstPtr;

}; // struct LoneJoint_

typedef ::seed_robotics::LoneJoint_<std::allocator<void> > LoneJoint;

typedef boost::shared_ptr< ::seed_robotics::LoneJoint > LoneJointPtr;
typedef boost::shared_ptr< ::seed_robotics::LoneJoint const> LoneJointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::seed_robotics::LoneJoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::seed_robotics::LoneJoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::seed_robotics::LoneJoint_<ContainerAllocator1> & lhs, const ::seed_robotics::LoneJoint_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.bus_id == rhs.bus_id &&
    lhs.stiffness == rhs.stiffness &&
    lhs.stress_level == rhs.stress_level &&
    lhs.target_position == rhs.target_position &&
    lhs.target_speed == rhs.target_speed &&
    lhs.torque_limit == rhs.torque_limit &&
    lhs.present_position == rhs.present_position &&
    lhs.present_speed == rhs.present_speed &&
    lhs.temperature == rhs.temperature &&
    lhs.moving == rhs.moving &&
    lhs.HW_error_condition == rhs.HW_error_condition &&
    lhs.current == rhs.current;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::seed_robotics::LoneJoint_<ContainerAllocator1> & lhs, const ::seed_robotics::LoneJoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace seed_robotics

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::seed_robotics::LoneJoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::seed_robotics::LoneJoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::seed_robotics::LoneJoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::seed_robotics::LoneJoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::seed_robotics::LoneJoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::seed_robotics::LoneJoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::seed_robotics::LoneJoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6abe499ce867c10d257cf3acca9de505";
  }

  static const char* value(const ::seed_robotics::LoneJoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6abe499ce867c10dULL;
  static const uint64_t static_value2 = 0x257cf3acca9de505ULL;
};

template<class ContainerAllocator>
struct DataType< ::seed_robotics::LoneJoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "seed_robotics/LoneJoint";
  }

  static const char* value(const ::seed_robotics::LoneJoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::seed_robotics::LoneJoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"uint8 bus_id\n"
"uint8 stiffness\n"
"uint8 stress_level\n"
"uint16 target_position\n"
"uint16 target_speed\n"
"uint16 torque_limit\n"
"uint16 present_position\n"
"int16 present_speed\n"
"uint8 temperature\n"
"uint8 moving\n"
"uint8 HW_error_condition\n"
"int16 current\n"
;
  }

  static const char* value(const ::seed_robotics::LoneJoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::seed_robotics::LoneJoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.bus_id);
      stream.next(m.stiffness);
      stream.next(m.stress_level);
      stream.next(m.target_position);
      stream.next(m.target_speed);
      stream.next(m.torque_limit);
      stream.next(m.present_position);
      stream.next(m.present_speed);
      stream.next(m.temperature);
      stream.next(m.moving);
      stream.next(m.HW_error_condition);
      stream.next(m.current);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LoneJoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::seed_robotics::LoneJoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::seed_robotics::LoneJoint_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "bus_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bus_id);
    s << indent << "stiffness: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stiffness);
    s << indent << "stress_level: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stress_level);
    s << indent << "target_position: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.target_position);
    s << indent << "target_speed: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.target_speed);
    s << indent << "torque_limit: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.torque_limit);
    s << indent << "present_position: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.present_position);
    s << indent << "present_speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.present_speed);
    s << indent << "temperature: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.temperature);
    s << indent << "moving: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.moving);
    s << indent << "HW_error_condition: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.HW_error_condition);
    s << indent << "current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.current);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEED_ROBOTICS_MESSAGE_LONEJOINT_H
