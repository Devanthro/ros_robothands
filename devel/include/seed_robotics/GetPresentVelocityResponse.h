// Generated by gencpp from file seed_robotics/GetPresentVelocityResponse.msg
// DO NOT EDIT!


#ifndef SEED_ROBOTICS_MESSAGE_GETPRESENTVELOCITYRESPONSE_H
#define SEED_ROBOTICS_MESSAGE_GETPRESENTVELOCITYRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace seed_robotics
{
template <class ContainerAllocator>
struct GetPresentVelocityResponse_
{
  typedef GetPresentVelocityResponse_<ContainerAllocator> Type;

  GetPresentVelocityResponse_()
    : present_velocity(0)  {
    }
  GetPresentVelocityResponse_(const ContainerAllocator& _alloc)
    : present_velocity(0)  {
  (void)_alloc;
    }



   typedef int16_t _present_velocity_type;
  _present_velocity_type present_velocity;





  typedef boost::shared_ptr< ::seed_robotics::GetPresentVelocityResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::seed_robotics::GetPresentVelocityResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetPresentVelocityResponse_

typedef ::seed_robotics::GetPresentVelocityResponse_<std::allocator<void> > GetPresentVelocityResponse;

typedef boost::shared_ptr< ::seed_robotics::GetPresentVelocityResponse > GetPresentVelocityResponsePtr;
typedef boost::shared_ptr< ::seed_robotics::GetPresentVelocityResponse const> GetPresentVelocityResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::seed_robotics::GetPresentVelocityResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::seed_robotics::GetPresentVelocityResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::seed_robotics::GetPresentVelocityResponse_<ContainerAllocator1> & lhs, const ::seed_robotics::GetPresentVelocityResponse_<ContainerAllocator2> & rhs)
{
  return lhs.present_velocity == rhs.present_velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::seed_robotics::GetPresentVelocityResponse_<ContainerAllocator1> & lhs, const ::seed_robotics::GetPresentVelocityResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace seed_robotics

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::seed_robotics::GetPresentVelocityResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::seed_robotics::GetPresentVelocityResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::seed_robotics::GetPresentVelocityResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::seed_robotics::GetPresentVelocityResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::seed_robotics::GetPresentVelocityResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::seed_robotics::GetPresentVelocityResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::seed_robotics::GetPresentVelocityResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6fe58ed2f3aca75c6c471e970b3c43b7";
  }

  static const char* value(const ::seed_robotics::GetPresentVelocityResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6fe58ed2f3aca75cULL;
  static const uint64_t static_value2 = 0x6c471e970b3c43b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::seed_robotics::GetPresentVelocityResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "seed_robotics/GetPresentVelocityResponse";
  }

  static const char* value(const ::seed_robotics::GetPresentVelocityResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::seed_robotics::GetPresentVelocityResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 present_velocity\n"
"\n"
;
  }

  static const char* value(const ::seed_robotics::GetPresentVelocityResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::seed_robotics::GetPresentVelocityResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.present_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetPresentVelocityResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::seed_robotics::GetPresentVelocityResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::seed_robotics::GetPresentVelocityResponse_<ContainerAllocator>& v)
  {
    s << indent << "present_velocity: ";
    Printer<int16_t>::stream(s, indent + "  ", v.present_velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEED_ROBOTICS_MESSAGE_GETPRESENTVELOCITYRESPONSE_H
